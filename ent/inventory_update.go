// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ordersystem/ent/inventory"
	"ordersystem/ent/order"
	"ordersystem/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryUpdate is the builder for updating Inventory entities.
type InventoryUpdate struct {
	config
	hooks    []Hook
	mutation *InventoryMutation
}

// Where appends a list predicates to the InventoryUpdate builder.
func (iu *InventoryUpdate) Where(ps ...predicate.Inventory) *InventoryUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdateTime sets the "update_time" field.
func (iu *InventoryUpdate) SetUpdateTime(t time.Time) *InventoryUpdate {
	iu.mutation.SetUpdateTime(t)
	return iu
}

// SetName sets the "name" field.
func (iu *InventoryUpdate) SetName(s string) *InventoryUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetDescription sets the "description" field.
func (iu *InventoryUpdate) SetDescription(s string) *InventoryUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetTotal sets the "total" field.
func (iu *InventoryUpdate) SetTotal(i int) *InventoryUpdate {
	iu.mutation.ResetTotal()
	iu.mutation.SetTotal(i)
	return iu
}

// AddTotal adds i to the "total" field.
func (iu *InventoryUpdate) AddTotal(i int) *InventoryUpdate {
	iu.mutation.AddTotal(i)
	return iu
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (iu *InventoryUpdate) AddOrderIDs(ids ...int64) *InventoryUpdate {
	iu.mutation.AddOrderIDs(ids...)
	return iu
}

// AddOrder adds the "order" edges to the Order entity.
func (iu *InventoryUpdate) AddOrder(o ...*Order) *InventoryUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return iu.AddOrderIDs(ids...)
}

// Mutation returns the InventoryMutation object of the builder.
func (iu *InventoryUpdate) Mutation() *InventoryMutation {
	return iu.mutation
}

// ClearOrder clears all "order" edges to the Order entity.
func (iu *InventoryUpdate) ClearOrder() *InventoryUpdate {
	iu.mutation.ClearOrder()
	return iu
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (iu *InventoryUpdate) RemoveOrderIDs(ids ...int64) *InventoryUpdate {
	iu.mutation.RemoveOrderIDs(ids...)
	return iu
}

// RemoveOrder removes "order" edges to Order entities.
func (iu *InventoryUpdate) RemoveOrder(o ...*Order) *InventoryUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return iu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InventoryUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InventoryUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InventoryUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InventoryUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InventoryUpdate) defaults() {
	if _, ok := iu.mutation.UpdateTime(); !ok {
		v := inventory.UpdateDefaultUpdateTime()
		iu.mutation.SetUpdateTime(v)
	}
}

func (iu *InventoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(inventory.Table, inventory.Columns, sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdateTime(); ok {
		_spec.SetField(inventory.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(inventory.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.SetField(inventory.FieldDescription, field.TypeString, value)
	}
	if value, ok := iu.mutation.Total(); ok {
		_spec.SetField(inventory.FieldTotal, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedTotal(); ok {
		_spec.AddField(inventory.FieldTotal, field.TypeInt, value)
	}
	if iu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventory.OrderTable,
			Columns: []string{inventory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedOrderIDs(); len(nodes) > 0 && !iu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventory.OrderTable,
			Columns: []string{inventory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventory.OrderTable,
			Columns: []string{inventory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InventoryUpdateOne is the builder for updating a single Inventory entity.
type InventoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InventoryMutation
}

// SetUpdateTime sets the "update_time" field.
func (iuo *InventoryUpdateOne) SetUpdateTime(t time.Time) *InventoryUpdateOne {
	iuo.mutation.SetUpdateTime(t)
	return iuo
}

// SetName sets the "name" field.
func (iuo *InventoryUpdateOne) SetName(s string) *InventoryUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *InventoryUpdateOne) SetDescription(s string) *InventoryUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetTotal sets the "total" field.
func (iuo *InventoryUpdateOne) SetTotal(i int) *InventoryUpdateOne {
	iuo.mutation.ResetTotal()
	iuo.mutation.SetTotal(i)
	return iuo
}

// AddTotal adds i to the "total" field.
func (iuo *InventoryUpdateOne) AddTotal(i int) *InventoryUpdateOne {
	iuo.mutation.AddTotal(i)
	return iuo
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (iuo *InventoryUpdateOne) AddOrderIDs(ids ...int64) *InventoryUpdateOne {
	iuo.mutation.AddOrderIDs(ids...)
	return iuo
}

// AddOrder adds the "order" edges to the Order entity.
func (iuo *InventoryUpdateOne) AddOrder(o ...*Order) *InventoryUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return iuo.AddOrderIDs(ids...)
}

// Mutation returns the InventoryMutation object of the builder.
func (iuo *InventoryUpdateOne) Mutation() *InventoryMutation {
	return iuo.mutation
}

// ClearOrder clears all "order" edges to the Order entity.
func (iuo *InventoryUpdateOne) ClearOrder() *InventoryUpdateOne {
	iuo.mutation.ClearOrder()
	return iuo
}

// RemoveOrderIDs removes the "order" edge to Order entities by IDs.
func (iuo *InventoryUpdateOne) RemoveOrderIDs(ids ...int64) *InventoryUpdateOne {
	iuo.mutation.RemoveOrderIDs(ids...)
	return iuo
}

// RemoveOrder removes "order" edges to Order entities.
func (iuo *InventoryUpdateOne) RemoveOrder(o ...*Order) *InventoryUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return iuo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the InventoryUpdate builder.
func (iuo *InventoryUpdateOne) Where(ps ...predicate.Inventory) *InventoryUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InventoryUpdateOne) Select(field string, fields ...string) *InventoryUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inventory entity.
func (iuo *InventoryUpdateOne) Save(ctx context.Context) (*Inventory, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InventoryUpdateOne) SaveX(ctx context.Context) *Inventory {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InventoryUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InventoryUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InventoryUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdateTime(); !ok {
		v := inventory.UpdateDefaultUpdateTime()
		iuo.mutation.SetUpdateTime(v)
	}
}

func (iuo *InventoryUpdateOne) sqlSave(ctx context.Context) (_node *Inventory, err error) {
	_spec := sqlgraph.NewUpdateSpec(inventory.Table, inventory.Columns, sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Inventory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventory.FieldID)
		for _, f := range fields {
			if !inventory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inventory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdateTime(); ok {
		_spec.SetField(inventory.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(inventory.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.SetField(inventory.FieldDescription, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Total(); ok {
		_spec.SetField(inventory.FieldTotal, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedTotal(); ok {
		_spec.AddField(inventory.FieldTotal, field.TypeInt, value)
	}
	if iuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventory.OrderTable,
			Columns: []string{inventory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedOrderIDs(); len(nodes) > 0 && !iuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventory.OrderTable,
			Columns: []string{inventory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventory.OrderTable,
			Columns: []string{inventory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Inventory{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}

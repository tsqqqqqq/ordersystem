// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldInventoryID holds the string denoting the inventory_id field in the database.
	FieldInventoryID = "inventory_id"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeInventory holds the string denoting the inventory edge name in mutations.
	EdgeInventory = "inventory"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// InventoryTable is the table that holds the inventory relation/edge.
	InventoryTable = "orders"
	// InventoryInverseTable is the table name for the Inventory entity.
	// It exists in this package in order to avoid circular dependency with the "inventory" package.
	InventoryInverseTable = "inventories"
	// InventoryColumn is the table column denoting the inventory relation/edge.
	InventoryColumn = "inventory_id"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldInventoryID,
	FieldCount,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultCount holds the default value on creation for the "count" field.
	DefaultCount int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() int64
)

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByInventoryID orders the results by the inventory_id field.
func ByInventoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInventoryID, opts...).ToFunc()
}

// ByCount orders the results by the count field.
func ByCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCount, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByInventoryField orders the results by inventory field.
func ByInventoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryStep(), sql.OrderByField(field, opts...))
	}
}
func newInventoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InventoryTable, InventoryColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"ordersystem/ent/inventory"
	"ordersystem/ent/order"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryCreate is the builder for creating a Inventory entity.
type InventoryCreate struct {
	config
	mutation *InventoryMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ic *InventoryCreate) SetCreateTime(t time.Time) *InventoryCreate {
	ic.mutation.SetCreateTime(t)
	return ic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableCreateTime(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetCreateTime(*t)
	}
	return ic
}

// SetUpdateTime sets the "update_time" field.
func (ic *InventoryCreate) SetUpdateTime(t time.Time) *InventoryCreate {
	ic.mutation.SetUpdateTime(t)
	return ic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableUpdateTime(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetUpdateTime(*t)
	}
	return ic
}

// SetName sets the "name" field.
func (ic *InventoryCreate) SetName(s string) *InventoryCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *InventoryCreate) SetDescription(s string) *InventoryCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetTotal sets the "total" field.
func (ic *InventoryCreate) SetTotal(i int) *InventoryCreate {
	ic.mutation.SetTotal(i)
	return ic
}

// SetID sets the "id" field.
func (ic *InventoryCreate) SetID(i int64) *InventoryCreate {
	ic.mutation.SetID(i)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableID(i *int64) *InventoryCreate {
	if i != nil {
		ic.SetID(*i)
	}
	return ic
}

// AddOrderIDs adds the "order" edge to the Order entity by IDs.
func (ic *InventoryCreate) AddOrderIDs(ids ...int64) *InventoryCreate {
	ic.mutation.AddOrderIDs(ids...)
	return ic
}

// AddOrder adds the "order" edges to the Order entity.
func (ic *InventoryCreate) AddOrder(o ...*Order) *InventoryCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ic.AddOrderIDs(ids...)
}

// Mutation returns the InventoryMutation object of the builder.
func (ic *InventoryCreate) Mutation() *InventoryMutation {
	return ic.mutation
}

// Save creates the Inventory in the database.
func (ic *InventoryCreate) Save(ctx context.Context) (*Inventory, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InventoryCreate) SaveX(ctx context.Context) *Inventory {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InventoryCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InventoryCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InventoryCreate) defaults() {
	if _, ok := ic.mutation.CreateTime(); !ok {
		v := inventory.DefaultCreateTime()
		ic.mutation.SetCreateTime(v)
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		v := inventory.DefaultUpdateTime()
		ic.mutation.SetUpdateTime(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := inventory.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InventoryCreate) check() error {
	if _, ok := ic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Inventory.create_time"`)}
	}
	if _, ok := ic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Inventory.update_time"`)}
	}
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Inventory.name"`)}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Inventory.description"`)}
	}
	if _, ok := ic.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "Inventory.total"`)}
	}
	return nil
}

func (ic *InventoryCreate) sqlSave(ctx context.Context) (*Inventory, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InventoryCreate) createSpec() (*Inventory, *sqlgraph.CreateSpec) {
	var (
		_node = &Inventory{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(inventory.Table, sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeInt64))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.CreateTime(); ok {
		_spec.SetField(inventory.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ic.mutation.UpdateTime(); ok {
		_spec.SetField(inventory.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(inventory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.SetField(inventory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ic.mutation.Total(); ok {
		_spec.SetField(inventory.FieldTotal, field.TypeInt, value)
		_node.Total = value
	}
	if nodes := ic.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventory.OrderTable,
			Columns: []string{inventory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InventoryCreateBulk is the builder for creating many Inventory entities in bulk.
type InventoryCreateBulk struct {
	config
	builders []*InventoryCreate
}

// Save creates the Inventory entities in the database.
func (icb *InventoryCreateBulk) Save(ctx context.Context) ([]*Inventory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inventory, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InventoryCreateBulk) SaveX(ctx context.Context) []*Inventory {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InventoryCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InventoryCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
